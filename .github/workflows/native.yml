name: Windows Native Artifact Build

on:
  push:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  build-win64:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install SWIG
        run: cinst swig

      - name: Run SWIG
        run: |
          mkdir java\target\swig\ome\jxrlib
          swig.exe -java -c++ -package ome.jxrlib -outdir java\target\swig\ome\jxrlib -o java\target\swig\JXR_wrap.cxx java\JXR.i

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build native code
        run: msbuild jxrencoderdecoder\JXR_vc16.sln /p:Configuration=Release /p:Platform="x64"

      - name: Build native artifacts
        run: mvn -f java\native-windows_64\pom.xml package

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-win64
          path: java\native-windows_64\target\*.jar

  build-linux64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install SWIG
        run: sudo apt-get install -y swig

      - name: Build native code
        run: make clean swig all

      - name: Run tests
        run: |
          export LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/build
          cd build
          mkdir -p transcoded/C/ transcoded/C++/ transcoded/Java/
          # Test base jxrlib C library
          for input in ../fixtures/first-tiles/*; do
            basename=${input##*/};
            basename=${bn%.jxr};
            ./JxrDecApp -i "$input" -o "transcoded/C/$basename.tif";
            ./jxrdecode "$input" "transcoded/C++/$basename.tif";
            ./jxrdecode --in-memory "$input";
          done
          # Test jxrlib Java bindings (in memory and file to file)
          mvn -f ../java/pom.xml test
          # Testing was successful
          cd ${GITHUB_WORKSPACE}
          mvn -f java/native-linux_64 package;

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-linux64
          path: java/native-linux_64/target/*.jar

  build-macos:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install SWIG
        run: brew install swig

      - name: Build native code
        run: |
          make clean swig all
          mkdir -p ${HOME}/Library/Java/Extensions
          cp build/*.dylib ${HOME}/Library/Java/Extensions

      - name: Run tests
        run: |
          cd build
          mkdir -p transcoded/C/ transcoded/C++/ transcoded/Java/
          # Test base jxrlib C library
          for input in ../fixtures/first-tiles/*; do
            basename=${input##*/};
            basename=${bn%.jxr};
            ./JxrDecApp -i "$input" -o "transcoded/C/$basename.tif";
            ./jxrdecode "$input" "transcoded/C++/$basename.tif";
            ./jxrdecode --in-memory "$input";
          done
          # Test jxrlib Java bindings (in memory and file to file)
          mvn -f ../java/pom.xml test
          # Testing was successful
          cd ${GITHUB_WORKSPACE}
          mvn -f java/native-osx_64 package;

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-macos
          path: java/native-osx_64/target/*.jar

  build-all:
    runs-on: ubuntu-latest
    needs: [build-win64, build-linux64, build-macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download native artifacts
        uses: actions/download-artifact@v2

      - name: Install artifacts in local Maven repository
        run: |
          for jar in artifacts*/*.jar; do
          mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -Dfile=${jar}
          done

      - name: Build all artifact
        run: mvn -f java/all/pom.xml package install

      - name: Run tests
        run: |
          gradle -b java/cli/build.gradle install
          mkdir -p build/transcoded/C/ build/transcoded/C++/ build/transcoded/Java/
          export EXT="tif"
          export IFS="
          "

          for input in fixtures/first-tiles/*; do
            output=$(basename "$input")
            output=$(basename "$output" .jxr)
            java/cli/build/install/cli/bin/cli --in-memory "$input" "build/transcoded/Java/in-memory-$output.$EXT"
          done

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-all
          path: java/all/target/*.jar
